/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 --types ./public/ringProblem.glb --transform -s
*/
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef, useTransition } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import useRingConfig from "./useRingConfig";

type Nodes = {
  ring1: THREE.Mesh;
  ring2: THREE.Mesh;
  diamond1: THREE.Mesh;
  diamond2: THREE.Mesh;
  diamond3: THREE.Mesh;
  ringholder: THREE.Mesh;
  base: THREE.Mesh;
};
type GLTFResult = GLTF & {
  nodes: Nodes;
};

const goldMaterial = new THREE.MeshPhysicalMaterial({
  color: "#FFD700",
  clearcoat: 1,
  metalness: 1,
  reflectivity: 1,
});

const silverMaterial = new THREE.MeshPhysicalMaterial({
  color: "platinum",
  metalness: 1,
  reflectivity: 1,
  clearcoat: 1,
});

interface BodyType {
  nodes: Nodes;
}

const Body = ({ nodes }: BodyType) => {
  const { bodyColor } = useRingConfig();

  return (
    <mesh
      castShadow
      receiveShadow
      geometry={nodes.ring1.geometry}
      material={bodyColor == "gold" ? goldMaterial : silverMaterial}
      rotation={[0, 0, -Math.PI / 2]}
    />
  );
};

interface HeadType {
  nodes: Nodes;
}

const Head = ({ nodes }: HeadType) => {
  const { headColor, diamond } = useRingConfig();

  const diamondMaterial1 = new THREE.MeshPhysicalMaterial({
    roughness: 0,
    transmission: 1,
    reflectivity: 1,
    clearcoat: 1,
    ior: 2.418,
    color: "hotpink",
  });

  const diamondMaterial2 = new THREE.MeshPhysicalMaterial({
    roughness: 0,
    transmission: 1,
    reflectivity: 1,
    clearcoat: 1,
    ior: 2.418,
    color: "aquamarine",
  });

  const diamondMaterial3 = new THREE.MeshPhysicalMaterial({
    roughness: 0,
    transmission: 1,
    reflectivity: 1,
    clearcoat: 1,
    ior: 2.418,
    color: "yellowgreen",
  });

  return (
    <>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.diamond1.geometry}
        material={diamondMaterial1}
        position={[0, 1.39, 0]}
        scale={0.41}
        visible={diamond == "diamond1"}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.diamond2.geometry}
        material={diamondMaterial2}
        position={[0, 1.35, 0]}
        rotation={[Math.PI, 0, Math.PI]}
        scale={0.39}
        visible={diamond == "diamond2"}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.diamond3.geometry}
        material={diamondMaterial3}
        position={[0, 1.36, 0]}
        scale={0.41}
        visible={diamond == "diamond3"}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.ringholder.geometry}
        material={headColor == "gold" ? goldMaterial : silverMaterial}
        position={[0, -0.44, 0]}
        scale={1.37}
      />
    </>
  );
};

const BgReflector = () => {
  const material = new THREE.MeshStandardMaterial({
    color: "#fecaca",
  });
  return (
    <mesh
      position={[0, -1.2, 0]}
      scale={1}
      rotation={[0, 0, 0]}
      receiveShadow
      material={material}
      dispose={null}
    >
      <cylinderGeometry args={[2, 2, 0.05, 64]} />
    </mesh>
  );
};

function Model(props: JSX.IntrinsicElements["group"]) {
  const [, startTransition] = useTransition();
  const { nodes } = useGLTF("./ringProblem-transformed.glb") as GLTFResult;

  const groupRef = useRef<THREE.Group>(null);

  useFrame(({ clock }) => {
    startTransition(() => {
      if (groupRef.current)
        groupRef.current.rotation.y =
          Math.sin(clock.getElapsedTime()) + Math.PI;
    });
  });

  return (
    <group {...props} dispose={null} ref={groupRef}>
      <Head nodes={nodes} />
      <Body nodes={nodes} />
      <BgReflector />
    </group>
  );
}

useGLTF.preload("./ringProblem-transformed.glb");

export default Model;
