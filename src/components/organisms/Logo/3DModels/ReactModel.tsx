/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 --types ./src/assets/3dModels/react.glb --transform -s
*/

import { animated } from "@react-spring/three";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import useBounceInAnimation from "../../../../hooks/useBounceInAnimation";
import CanvasHOC from "../CanvasHOC";

type GLTFResult = GLTF & {
  nodes: {
    reactjs: THREE.Mesh;
    ring1: THREE.Mesh;
    ring2: THREE.Mesh;
    ring3: THREE.Mesh;
  };
};

const reactBlueMaterial = new THREE.MeshPhysicalMaterial({
  color: "#61dbfb",
  roughness: 1,
  clearcoat: 1,
});

function ReactModel() {
  const { nodes } = useGLTF("/react-transformed.glb") as unknown as GLTFResult;
  const { groupRef, springs } = useBounceInAnimation({
    scaleTo: 0.4,
  });

  return (
    <animated.group dispose={null} ref={groupRef} scale={springs.scale}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.reactjs.geometry}
        material={reactBlueMaterial}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ring1.geometry}
          material={reactBlueMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ring2.geometry}
          material={reactBlueMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.ring3.geometry}
          material={reactBlueMaterial}
        />
      </mesh>
    </animated.group>
  );
}

useGLTF.preload("/react-transformed.glb");

export default CanvasHOC(ReactModel, "React Js");
