/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 --types ./src/assets/3dModels/figma.glb --transform -s
*/

import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import CanvasHOC from "../CanvasHOC";

type GLTFResult = GLTF & {
  nodes: {
    figma: THREE.Mesh;
    cyclinder1: THREE.Mesh;
    cyclinder2: THREE.Mesh;
    cyclinder3: THREE.Mesh;
    droplet: THREE.Mesh;
  };
};

const darkRedMaterial = new THREE.MeshPhysicalMaterial({
  color: "#f24d1d",
  roughness: 1,
  clearcoat: 1,
});
const lightRedMaterial = new THREE.MeshPhysicalMaterial({
  color: "#ff7262",
  roughness: 1,
  clearcoat: 1,
});
const purpleMaterial = new THREE.MeshPhysicalMaterial({
  color: "#a259ff",
  roughness: 1,
  clearcoat: 1,
});
const blueMaterial = new THREE.MeshPhysicalMaterial({
  color: "#1dbbfe",
  roughness: 1,
  clearcoat: 1,
});
const greenMaterial = new THREE.MeshPhysicalMaterial({
  color: "#11cf82",
  roughness: 1,
  clearcoat: 1,
});

function FigmaModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/figma-transformed.glb") as unknown as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cyclinder3.geometry}
        material={purpleMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.droplet.geometry}
        material={greenMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.figma.geometry}
        material={blueMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cyclinder1.geometry}
        material={darkRedMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cyclinder2.geometry}
        material={lightRedMaterial}
      />
    </group>
  );
}

useGLTF.preload("/figma-transformed.glb");

export default CanvasHOC(FigmaModel, "Figma");
